"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./src/utils/job-calculations.ts":
/*!***************************************!*\
  !*** ./src/utils/job-calculations.ts ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateJobEfficiency: () => (/* binding */ calculateJobEfficiency),\n/* harmony export */   calculateShopEfficiency: () => (/* binding */ calculateShopEfficiency)\n/* harmony export */ });\nconst MINUTES_PER_HOUR = 60;\nfunction calculateSinglePartTime(length, passes, travelSpeed, efficiency, isManual) {\n    if (travelSpeed <= 0) throw new Error('Travel speed must be greater than 0');\n    if (efficiency <= 0) throw new Error('Efficiency must be greater than 0');\n    const baseTime = length * passes / travelSpeed;\n    return isManual ? baseTime / (efficiency / 100) : baseTime * (efficiency / 100);\n}\nfunction calculateJobEfficiency(job) {\n    const manual = {\n        weldTime: 0,\n        totalCycleTime: 0\n    };\n    const cobot = {\n        weldTime: 0,\n        totalCycleTime: 0\n    };\n    // Calculate total time for each part\n    job.parts.forEach((param)=>{\n        let { part, quantity } = param;\n        try {\n            // Calculate time for one part\n            const singlePartManualTime = calculateSinglePartTime(part.length, part.passes, part.manualTravelSpeed, part.manualEfficiency, true);\n            const singlePartCobotTime = calculateSinglePartTime(part.length, part.passes, part.cobotTravelSpeed, part.cobotEfficiency, false);\n            // Calculate total annual time for this part type\n            const totalPartsPerYear = quantity * job.annualDemand;\n            manual.weldTime += singlePartManualTime * totalPartsPerYear;\n            cobot.weldTime += singlePartCobotTime * totalPartsPerYear;\n        } catch (error) {\n            console.error(\"Error calculating times for part \".concat(part.name, \":\"), error);\n        // Continue with next part instead of failing completely\n        }\n    });\n    // Set total cycle times (currently just weld times, can be expanded)\n    manual.totalCycleTime = manual.weldTime;\n    cobot.totalCycleTime = cobot.weldTime;\n    // Calculate improvements (with safety checks)\n    const cycleTimeReduction = manual.totalCycleTime > 0 ? (manual.totalCycleTime - cobot.totalCycleTime) / manual.totalCycleTime * 100 : 0;\n    const laborTimeSaved = (manual.totalCycleTime - cobot.totalCycleTime) / MINUTES_PER_HOUR;\n    const throughputIncrease = cobot.totalCycleTime > 0 ? (manual.totalCycleTime / cobot.totalCycleTime - 1) * 100 : 0;\n    return {\n        manual,\n        cobot,\n        improvements: {\n            cycleTimeReduction: Math.max(0, cycleTimeReduction),\n            laborTimeSaved: Math.max(0, laborTimeSaved),\n            throughputIncrease: Math.max(0, throughputIncrease),\n            totalAnnualSavings: Math.max(0, laborTimeSaved)\n        }\n    };\n}\nfunction calculateShopEfficiency(jobs) {\n    if (!Array.isArray(jobs) || jobs.length === 0) {\n        return {\n            totalJobs: 0,\n            uniqueParts: 0,\n            totalAnnualParts: 0,\n            manual: {\n                totalWeldTime: 0,\n                totalCycleTime: 0\n            },\n            cobot: {\n                totalWeldTime: 0,\n                totalCycleTime: 0\n            },\n            improvements: {\n                totalLaborSaved: 0,\n                averageCycleTimeReduction: 0,\n                averageThroughputIncrease: 0,\n                jobBreakdown: []\n            }\n        };\n    }\n    // Calculate unique parts and total annual parts\n    const uniqueParts = jobs.reduce((sum, job)=>sum + job.parts.length, 0);\n    const totalAnnualParts = jobs.reduce((sum, job)=>sum + job.parts.reduce((jobSum, param)=>{\n            let { quantity } = param;\n            return jobSum + quantity * job.annualDemand;\n        }, 0), 0);\n    // Calculate metrics for each job\n    const jobMetrics = jobs.map((job)=>({\n            job,\n            metrics: calculateJobEfficiency(job)\n        }));\n    // Calculate shop-wide metrics\n    const manualTimes = jobMetrics.reduce((total, param)=>{\n        let { metrics } = param;\n        return {\n            totalWeldTime: total.totalWeldTime + metrics.manual.weldTime,\n            totalCycleTime: total.totalCycleTime + metrics.manual.totalCycleTime\n        };\n    }, {\n        totalWeldTime: 0,\n        totalCycleTime: 0\n    });\n    const cobotTimes = jobMetrics.reduce((total, param)=>{\n        let { metrics } = param;\n        return {\n            totalWeldTime: total.totalWeldTime + metrics.cobot.weldTime,\n            totalCycleTime: total.totalCycleTime + metrics.cobot.totalCycleTime\n        };\n    }, {\n        totalWeldTime: 0,\n        totalCycleTime: 0\n    });\n    const totalLaborSaved = (manualTimes.totalCycleTime - cobotTimes.totalCycleTime) / MINUTES_PER_HOUR;\n    // Calculate averages (only if there are jobs)\n    const averageCycleTimeReduction = jobMetrics.reduce((sum, param)=>{\n        let { metrics } = param;\n        return sum + metrics.improvements.cycleTimeReduction;\n    }, 0) / jobs.length;\n    const averageThroughputIncrease = jobMetrics.reduce((sum, param)=>{\n        let { metrics } = param;\n        return sum + metrics.improvements.throughputIncrease;\n    }, 0) / jobs.length;\n    return {\n        totalJobs: jobs.length,\n        uniqueParts,\n        totalAnnualParts,\n        manual: manualTimes,\n        cobot: cobotTimes,\n        improvements: {\n            totalLaborSaved: Math.max(0, totalLaborSaved),\n            averageCycleTimeReduction: Math.max(0, averageCycleTimeReduction),\n            averageThroughputIncrease: Math.max(0, averageThroughputIncrease),\n            jobBreakdown: jobMetrics.map((param)=>{\n                let { job, metrics } = param;\n                return {\n                    jobName: job.name,\n                    manualTime: metrics.manual.totalCycleTime,\n                    cobotTime: metrics.cobot.totalCycleTime,\n                    laborSaved: metrics.improvements.laborTimeSaved,\n                    cycleTimeReduction: metrics.improvements.cycleTimeReduction\n                };\n            })\n        }\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/job-calculations.ts\n"));

/***/ })

});